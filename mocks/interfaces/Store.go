// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	models "url-shortener/models"

	mock "github.com/stretchr/testify/mock"
)

// Store is an autogenerated mock type for the Store type
type Store struct {
	mock.Mock
}

// Create provides a mock function with given fields: url, shortURl
func (_m *Store) Create(url string, shortURl string) bool {
	ret := _m.Called(url, shortURl)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(url, shortURl)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GetByShortURL provides a mock function with given fields: shortUrl
func (_m *Store) GetByShortURL(shortUrl string) string {
	ret := _m.Called(shortUrl)

	if len(ret) == 0 {
		panic("no return value specified for GetByShortURL")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(shortUrl)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetByURL provides a mock function with given fields: url
func (_m *Store) GetByURL(url string) string {
	ret := _m.Called(url)

	if len(ret) == 0 {
		panic("no return value specified for GetByURL")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(url)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetTopThreeDomains provides a mock function with given fields:
func (_m *Store) GetTopThreeDomains() []models.DomainMetricsCollection {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTopThreeDomains")
	}

	var r0 []models.DomainMetricsCollection
	if rf, ok := ret.Get(0).(func() []models.DomainMetricsCollection); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.DomainMetricsCollection)
		}
	}

	return r0
}

// NewStore creates a new instance of Store. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *Store {
	mock := &Store{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
